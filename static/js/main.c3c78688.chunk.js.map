{"version":3,"sources":["images/bowser.png","images/babymario.png","images/bowserjr.png","images/donkeykong.png","images/kingboo.png","images/morton.png","images/shyguy.png","images/waluigi.png","images/refresh.png","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","isFlipped","flipped","flipDirection","className","onClick","click","src","image","App","state","message","loseMessage","cards","BabyMario","ShyGuy","BowserJr","Morton","Bowser","DonkeyKong","KingBoo","Waluigi","firstFlip","secondFlip","lives","showRefresh","flipHandler","index","newCards","setState","winningLogic","restart","card","i","length","setTimeout","this","moves","Refresh","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3c78688.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bowser.b296e163.png\";","module.exports = __webpack_public_path__ + \"static/media/babymario.bcdbf223.png\";","module.exports = __webpack_public_path__ + \"static/media/bowserjr.416fae70.png\";","module.exports = __webpack_public_path__ + \"static/media/donkeykong.d37cf451.png\";","module.exports = __webpack_public_path__ + \"static/media/kingboo.7d1fcf1e.png\";","module.exports = __webpack_public_path__ + \"static/media/morton.dd30d2c5.png\";","module.exports = __webpack_public_path__ + \"static/media/shyguy.b70c7b5f.png\";","module.exports = __webpack_public_path__ + \"static/media/waluigi.79686ed9.png\";","module.exports = __webpack_public_path__ + \"static/media/refresh.e3104c45.png\";","import React from \"react\";\nimport ReactCardFlip from \"react-card-flip\";\nimport \"../styles/card.css\";\n\nconst Card = props => {\n  return (\n    //ReactCardFlip is a component imported from a third party module.\n    //Check out https://www.npmjs.com/package/react-card-flip if you need more info on usage\n    <ReactCardFlip isFlipped={props.flipped} flipDirection=\"horizontal\">\n      <div className=\"card-front\" onClick={props.click}>\n        {/* <p>click to turn</p> */}\n      </div>\n\n      <div className=\"card-back\">\n        <img className=\"card-image\" src={props.image} />\n      </div>\n    </ReactCardFlip>\n  );\n};\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport \"./App.css\";\nimport Bowser from \"./images/bowser.png\";\nimport BabyMario from \"./images/babymario.png\";\nimport BowserJr from \"./images/bowserjr.png\"\nimport DonkeyKong from \"./images/donkeykong.png\"\nimport KingBoo from \"./images/kingboo.png\"\nimport Morton from \"./images/morton.png\"\nimport ShyGuy from \"./images/shyguy.png\"\nimport Waluigi from \"./images/waluigi.png\"\nimport Refresh from \"./images/refresh.png\"\n\nclass App extends Component {\n  state = {\n    message: \"\",\n    loseMessage: \"You Lost. HEHEHE!\",\n    cards: [\n      { flipped: false, image: BabyMario },\n      { flipped: false, image: ShyGuy },\n      { flipped: false, image: BowserJr },\n      { flipped: false, image: Morton },\n      { flipped: false, image: Bowser },\n      { flipped: false, image: BabyMario },\n      { flipped: false, image: DonkeyKong },\n      { flipped: false, image: KingBoo },\n      { flipped: false, image: Waluigi},\n      { flipped: false, image: KingBoo },\n      { flipped: false, image: Morton },\n      { flipped: false, image: Bowser },\n      { flipped: false, image: ShyGuy },\n      { flipped: false, image: BowserJr },\n      { flipped: false, image: Waluigi},\n      { flipped: false, image: DonkeyKong },\n    ],\n    firstFlip: null,\n    secondFlip: null,\n    lives: 5,\n    showRefresh: false\n  };\n\n  flipHandler = index => {\n    if (this.state.firstFlip == null) {\n      let newCards = this.state.cards;\n      newCards[index].flipped = true;\n      this.setState({ cards: newCards, firstFlip: index });\n    } else if (this.state.secondFlip == null) {\n      let newCards = this.state.cards;\n      newCards[index].flipped = true;\n      this.setState({ cards: newCards, secondFlip: index });\n    }\n  };\n\n  //this is a React Lifecycle method - read the docs\n  componentDidUpdate() {\n    if (this.state.lives == 0){\n      this.setState({showRefresh: !this.state.showRefresh, lives: \"Dead\" })\n    }\n    //object destructuring so I don't have to keep typing this.state.\n    const { firstFlip, secondFlip, cards } = this.state;\n   \n  \n    if (firstFlip != null && secondFlip != null) {\n      if (cards[firstFlip].image == cards[secondFlip].image) {\n        \n        this.setState({ firstFlip: null, secondFlip: null, message: \"Its a match\"});\n      } else if (cards[firstFlip].image != cards[secondFlip].image) {\n        setTimeout(() => {\n          let newCards = this.state.cards;\n          let moves = this.state.lives\n          newCards[firstFlip].flipped = false;\n          newCards[secondFlip].flipped = false;\n          \n          this.setState({ cards: newCards, firstFlip: null, secondFlip: null, message: \"It's not a match\", lives: moves -1 });\n        }, 1000)\n        \n      }\n    }\n    this.winningLogic();\n  }\n\n  winningLogic = () => {\n    //write a function that determines a winner (every card is turned over)\n    //there's an array method called -every- which you might want to look up.\n    //you then need to decided where the best place to call this method is.\n  };\n\n\n  restart = () => {\n    let card = [...this.state.cards]\n    for(let i = 0; i < card.length; i++){\n      card[i].flipped = false\n    }\n    setTimeout(() => {\n        this.setState({cards: card, lives: 5, showRefresh: !this.state.showRefresh, message: \"\"})\n    }, 500); \n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"title\">\n          <h1>Memory Game</h1>\n        </div>\n        <div className=\"subTitle\">\n          <p className=\"info\">{this.state.lives} Lives </p>\n          <p className=\"info\">0 Mins 0 Secs</p>\n          <img className=\"refresh\" src={Refresh} onClick={this.restart}/>\n        </div>\n        <div className=\"board\">\n          {this.state.cards.map((card, index) => {\n          return <Card key={index} image={card.image} flipped={card.flipped} click={() => this.flipHandler(index)} />;\n        })}\n        <div className={this.state.showRefresh ? \"lose\" : \"hide\"}>\n          <p className=\"lose\">{this.state.loseMessage}\n          <img className=\"refresh2\" src={Refresh} onClick={this.restart}/></p>\n        </div>\n        <p className=\"matchMsg\">{this.state.message}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}